<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Guilherme Pedrosa</title>
    <link>https://gtpedrosa.github.io/tags/python/</link>
    <description>Recent content in python on Guilherme Pedrosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 10 Jan 2023 04:22:00 -0300</lastBuildDate>
    
	<atom:link href="https://gtpedrosa.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading PVSyst&#39;s Module (PAN) and Inverter (OND) files with Python</title>
      <link>https://gtpedrosa.github.io/blog/reading-pvsysts-module-pan-and-inverter-ond-files-with-python/</link>
      <pubDate>Tue, 10 Jan 2023 04:22:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/reading-pvsysts-module-pan-and-inverter-ond-files-with-python/</guid>
      <description>Before diving into solar simulations with PVLib, one of the main concerns I had was how to use the same inputs given to PVSyst, the de facto standard software of the solar industry. That also meant using the same files that describe the main equipments: PAN files for the modules and OND files for the inverters.
Although It surprised me that PVLib did not come with a PVSyst file&amp;rsquo;s parser, It was not a deal breaker.</description>
    </item>
    
    <item>
      <title>Offline python documentation with Zeal and doc2dash</title>
      <link>https://gtpedrosa.github.io/blog/offline-python-documentation-with-zeal-and-doc2dash/</link>
      <pubDate>Tue, 13 Sep 2022 23:35:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/offline-python-documentation-with-zeal-and-doc2dash/</guid>
      <description>While working on a python project today, the internet connection went down. For a while, I couldn&amp;rsquo;t reference some API documentation online. This got me thinking: could I have them all offline? Later on (with connection!), I have found the answer: an offline documentation tool called Zeal.
If the project you are working on is popular, there are already docsets available for download. This will make the documentation for a given package accessible in the blink of an eye!</description>
    </item>
    
    <item>
      <title>Setting up a Data Science local environment without administrative rights on Windows</title>
      <link>https://gtpedrosa.github.io/blog/setting-up-a-data-science-local-environment-without-administrative-rights-on-windows/</link>
      <pubDate>Sun, 07 Jun 2020 18:24:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/setting-up-a-data-science-local-environment-without-administrative-rights-on-windows/</guid>
      <description>Installing any program on C:\Program Files, Windows default installation folder, requires administrative rights. It is possible, however, to install programs on the HOME folder without any special permissions. The default HOME path is set to C:\Users\yourusername\ and can be accessed by typing %HOME% on the address bar. I have found this approach makes it possible to have some autonomy from the IT department without compromising security.
Using this approach, the softwares will run just fine without any customization.</description>
    </item>
    
    <item>
      <title>Using SQLAlchemy to navigate an existing database</title>
      <link>https://gtpedrosa.github.io/blog/using-sqlalchemy-to-navigate-an-existing-database/</link>
      <pubDate>Sat, 06 Apr 2019 18:56:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/using-sqlalchemy-to-navigate-an-existing-database/</guid>
      <description>Given the task to interact with an existing database I felt compelled to use the ORM abstraction instead of making queries with raw sql. My aim was to avoid the common pitfalls regarding making text templates for sqlqueries, prone to sql injection exploits, and enhance query composability.
I&amp;rsquo;ve found there are essentialy two ways to approach this task: through reflextion or a declarative model. Both approaches are explained in the following sections.</description>
    </item>
    
    <item>
      <title>Installing a virtualenv with specific python version</title>
      <link>https://gtpedrosa.github.io/blog/installing-a-virtualenv-with-specific-python-version/</link>
      <pubDate>Thu, 10 Nov 2016 19:11:44 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/installing-a-virtualenv-with-specific-python-version/</guid>
      <description>&lt;p&gt;When trying to install the requirements for a course on coursera I found out that my system&amp;rsquo;s python distribution was a bit outdated. Since I did not want to change anything systemwide (and possibily break things) I decided to finally go for a virtual environment.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>