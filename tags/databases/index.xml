<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on Guilherme Pedrosa</title>
    <link>https://gtpedrosa.github.io/tags/databases/</link>
    <description>Recent content in Databases on Guilherme Pedrosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 12 Apr 2020 10:58:00 -0300</lastBuildDate>
    
	<atom:link href="https://gtpedrosa.github.io/tags/databases/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading SQL Dumps with SQL Server management Studio</title>
      <link>https://gtpedrosa.github.io/blog/reading-sql-dumps-with-sql-server-management-studio/</link>
      <pubDate>Sun, 12 Apr 2020 10:58:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/reading-sql-dumps-with-sql-server-management-studio/</guid>
      <description>This post is about how to inspect the content of SQL database (.mdf and .ldf files). The answer is to attach these files to an existing SQL server instance, instead of opening them directly with a tool such as SQL Management Studio. This was not clear time until I stumbled upon this video.
Steps  Keep a SQL Server instance running in the background; Fire up SQL Management studio and connect to this instance by providing .</description>
    </item>
    
    <item>
      <title>Using SQLAlchemy to navigate an existing database</title>
      <link>https://gtpedrosa.github.io/blog/using-sqlalchemy-to-navigate-an-existing-database/</link>
      <pubDate>Sat, 06 Apr 2019 18:56:00 -0300</pubDate>
      
      <guid>https://gtpedrosa.github.io/blog/using-sqlalchemy-to-navigate-an-existing-database/</guid>
      <description>Given the task to interact with an existing database I felt compelled to use the ORM abstraction instead of making queries with raw sql. My aim was to avoid the common pitfalls regarding making text templates for sqlqueries, prone to sql injection exploits, and enhance query composability.
I&amp;rsquo;ve found there are essentialy two ways to approach this task: through reflextion or a declarative model. Both approaches are explained in the following sections.</description>
    </item>
    
  </channel>
</rss>